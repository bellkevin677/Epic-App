{"version":3,"sources":["services/FhirClient.js","containers/App/actions.js","containers/App/constants.js","containers/App/sagas.js","containers/Home/constants.js","containers/Home/actions.js","containers/Home/sagas.js","store/sagas.js","containers/App/reducers.js","containers/Home/reducers.js","store/reducers.js","containers/App/selectors.js","modules/history.js","containers/Home/selectors.js","containers/Home/index.js","components/ErrorMessage/index.js","components/SuccessMessage/index.js","components/Information/index.js","containers/App/index.js","index.js","store/index.js"],"names":["client","addSmartInformationAction","type","payload","loaded","connect","a","FHIR","oauth2","ready","then","smart","loadSmartInfo","root","call","put","header","body","all","takeEvery","loadPatientInfoActionSuccess","patient","loadPatientInfo","read","sagas","appSaga","homeSaga","initialState","container","appReducer","state","action","produce","draft","_","get","error","homeReducer","rootReducer","combineReducers","app","home","getApp","getSmartError","createSelector","getSmartInfo","getPatient","history","createBrowserHistory","location","query","qs","parse","search","substr","listen","go","goBack","push","replace","getReady","Home","this","props","loadPatient","Fragment","Grid","Row","Header","as","Icon","name","React","Component","dispatch","ErrorMessage","Message","icon","color","Content","Divider","hidden","SuccessMessage","user","List","Item","id","Information","bulleted","href","App","initializeSmartClient","Container","style","marginTop","columns","stackable","Column","path","exact","component","store","composeEnhancers","compose","reduxSagaMonitorOptions","sagaMiddleware","createSagaMiddleware","middlewares","routerMiddleware","logger","enhancers","applyMiddleware","createStore","runSaga","run","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.899ab326.chunk.js","sourcesContent":["import FHIR from 'fhirclient';\r\n\r\nlet loaded = false;\r\nlet client;\r\n\r\nconst connect = async () => {\r\n  if (loaded) {\r\n    return client;\r\n  }\r\n  return FHIR.oauth2.ready().then((smart) => {\r\n    loaded = true;\r\n    client = smart;\r\n    return client;\r\n  });\r\n};\r\n\r\nexport default connect;\r\n","/**\r\n * @module Actions/App\r\n * @desc App Actions\r\n */\r\nimport { LOAD_SMART_INFO, LOAD_SMART_INFO_SUCCESS, LOAD_SMART_INFO_FAILURE } from './constants';\r\n\r\nexport const loadSmartInfoAction = () => ({ type: LOAD_SMART_INFO });\r\n\r\nexport const addSmartInformationAction = (client) => ({\r\n  type: LOAD_SMART_INFO_SUCCESS,\r\n  payload: client,\r\n});\r\n\r\nexport const addSmartInformationErrorAction = () => ({\r\n  type: LOAD_SMART_INFO_FAILURE,\r\n  payload: {\r\n    header: 'Unconnected to a FHIR Server',\r\n    body: 'Make sure you launch from a SMART on FHIR Sandbox',\r\n  },\r\n});\r\n","/*\r\n * App Action Types\r\n *\r\n */\r\n\r\nexport const LOAD_SMART_INFO = 'App/LOAD_SMART_INFO';\r\nexport const LOAD_SMART_INFO_SUCCESS = 'App/LOAD_SMART_INFO_SUCCESS';\r\nexport const LOAD_SMART_INFO_FAILURE = 'App/LOAD_SMART_INFO_FAILURE';\r\n\r\nexport const LOAD_PATIENT_INFO_SUCCESS = 'App/LOAD_PATIENT_INFO_SUCCESS';\r\n","/**\r\n * sagas\r\n */\r\n\r\nimport { put, all, call, takeEvery } from 'redux-saga/effects';\r\nimport { LOAD_SMART_INFO } from './constants';\r\nimport { addSmartInformationAction, addSmartInformationErrorAction } from './actions';\r\n\r\nimport connect from '../../services/FhirClient';\r\n\r\nexport function* loadSmartInfo() {\r\n  try {\r\n    const client = yield call(connect);\r\n    yield put(addSmartInformationAction(client));\r\n  } catch (e) {\r\n    yield put(addSmartInformationErrorAction(e));\r\n  }\r\n}\r\n\r\nexport default function* root() {\r\n  yield all([takeEvery(LOAD_SMART_INFO, loadSmartInfo)]);\r\n}\r\n","/*\r\n * Home Action Types\r\n *\r\n */\r\n\r\nexport const LOAD_PATIENT_INFO = 'Home/LOAD_PATIENT_INFO';\r\nexport const LOAD_PATIENT_INFO_SUCCESS = 'Home/LOAD_PATIENT_INFO_SUCCESS';\r\nexport const LOAD_PATIENT_INFO_ERROR = 'Home/LOAD_PATIENT_INFO_ERROR';\r\n","/**\r\n * @module Actions/App\r\n * @desc App Actions\r\n */\r\n\r\nimport { LOAD_PATIENT_INFO, LOAD_PATIENT_INFO_SUCCESS, LOAD_PATIENT_INFO_ERROR } from './constants';\r\n\r\nexport const loadPatientInfoAction = () => ({\r\n  type: LOAD_PATIENT_INFO,\r\n});\r\n\r\nexport const loadPatientInfoActionSuccess = (patient) => ({\r\n  type: LOAD_PATIENT_INFO_SUCCESS,\r\n  payload: patient,\r\n});\r\n\r\nexport const loadPatientInfoActionError = (e) => ({\r\n  type: LOAD_PATIENT_INFO_ERROR,\r\n  payload: e,\r\n});\r\n","/**\r\n * sagas\r\n */\r\n\r\nimport { all, put, call, takeEvery } from 'redux-saga/effects';\r\nimport connect from '../../services/FhirClient';\r\n\r\nimport { LOAD_PATIENT_INFO } from './constants';\r\nimport { loadPatientInfoActionError, loadPatientInfoActionSuccess } from './actions';\r\n\r\nfunction* loadPatientInfo() {\r\n  try {\r\n    const client = yield call(connect);\r\n    const patient = yield call(client.patient.read);\r\n    yield put(loadPatientInfoActionSuccess(patient));\r\n  } catch (e) {\r\n    yield put(loadPatientInfoActionError(e));\r\n  }\r\n}\r\n\r\nexport default function* root() {\r\n  yield all([takeEvery(LOAD_PATIENT_INFO, loadPatientInfo)]);\r\n}\r\n","import { all } from 'redux-saga/effects';\r\n\r\nimport appSaga from '../containers/App/sagas';\r\nimport homeSaga from '../containers/Home/sagas';\r\n\r\nexport default function* sagas() {\r\n  yield all([appSaga(), homeSaga()]);\r\n}\r\n","/*\r\n * AppReducer\r\n *\r\n * The reducer takes care of our data. Using actions, we can\r\n * update our application state. To add a new action,\r\n * add it to the switch statement in the reducer function\r\n *\r\n */\r\nimport produce from 'immer';\r\nimport _ from 'lodash';\r\n\r\nimport { LOAD_SMART_INFO_SUCCESS, LOAD_SMART_INFO_FAILURE } from './constants';\r\n\r\nexport const initialState = {\r\n  container: 'App',\r\n};\r\n\r\nconst appReducer = (state = initialState, action) =>\r\n  produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case LOAD_SMART_INFO_SUCCESS:\r\n        draft.smart = _.get(action.payload, 'state.tokenResponse');\r\n        break;\r\n      case LOAD_SMART_INFO_FAILURE:\r\n        draft.error = action.payload;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\nexport default appReducer;\r\n","/*\r\n * HomeReducer\r\n *\r\n * The reducer takes care of our data. Using actions, we can\r\n * update our application state. To add a new action,\r\n * add it to the switch statement in the reducer function\r\n *\r\n */\r\n\r\nimport produce from 'immer';\r\n\r\nimport { LOAD_PATIENT_INFO_ERROR, LOAD_PATIENT_INFO_SUCCESS } from './constants';\r\n\r\n// The initial state of the App\r\nexport const initialState = {\r\n  container: 'Home',\r\n};\r\n\r\nconst homeReducer = (state = initialState, action) =>\r\n  produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case LOAD_PATIENT_INFO_SUCCESS:\r\n        draft.patient = action.payload;\r\n        break;\r\n      case LOAD_PATIENT_INFO_ERROR:\r\n        draft.patient = {\r\n          error: 'Something went wrong',\r\n        };\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\nexport default homeReducer;\r\n","/**\r\n * Combine all reducers in this file and export the combined reducers.\r\n */\r\n\r\nimport { combineReducers } from 'redux';\r\n\r\nimport appReducer from '../containers/App/reducers';\r\nimport homeReducer from '../containers/Home/reducers';\r\n\r\n/**\r\n * Merges the main reducer with the router state and dynamically injected reducers\r\n */\r\nconst rootReducer = combineReducers({\r\n  app: appReducer,\r\n  home: homeReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","/**\r\n * The App state selectors\r\n */\r\nimport _ from 'lodash';\r\n\r\nimport { createSelector } from 'reselect';\r\n\r\nexport const getApp = (state) => state.app;\r\n\r\nexport const getSmartError = createSelector([getApp], (app) => {\r\n  return app.error;\r\n});\r\n\r\nexport const getSmartInfo = createSelector([getApp], (app) => {\r\n  return app.smart;\r\n});\r\n\r\nexport const getPatient = (state) => {\r\n  return _.get(state, 'home.patient');\r\n};\r\n","// @flow\r\nimport { createBrowserHistory } from 'history';\r\nimport qs from 'qs';\r\n\r\nconst history = createBrowserHistory();\r\n\r\nhistory.location = {\r\n  ...history.location,\r\n  query: qs.parse(history.location.search.substr(1)),\r\n  state: {},\r\n};\r\n\r\nhistory.listen(() => {\r\n  history.location = {\r\n    ...history.location,\r\n    query: qs.parse(history.location.search.substr(1)),\r\n    state: history.location.state || {},\r\n  };\r\n});\r\n\r\nconst { go, goBack, push, replace } = history;\r\n\r\nexport { go, goBack, push, replace };\r\nexport default history;\r\n","/**\r\n * The global state selectors\r\n */\r\n\r\n// import { createSelector } from 'reselect';\r\n// import { initialState } from './reducers';\r\nimport _ from 'lodash';\r\n\r\nexport const getReady = (state) => {\r\n  return _.get(state, 'app.smart.user');\r\n};\r\n\r\nexport default getReady;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Header, Grid, Icon } from 'semantic-ui-react';\r\n\r\nimport { LOAD_PATIENT_INFO } from './constants';\r\nimport { getReady } from './selectors';\r\nimport { getPatient } from '../App/selectors';\r\n\r\nclass Home extends React.Component {\r\n  componentDidMount() {\r\n    const { error, patient, loadPatient } = this.props;\r\n    if (!error && !patient) {\r\n      loadPatient();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Grid.Row>\r\n          <Header as=\"h2\">\r\n            <Icon name=\"check\" />\r\n            Build something great\r\n          </Header>\r\n        </Grid.Row>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { ready: getReady(state), patient: getPatient(state) };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    loadPatient: () => {\r\n      dispatch({ type: LOAD_PATIENT_INFO });\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","import React from 'react';\r\n\r\nimport { Grid, Message, Divider, Icon } from 'semantic-ui-react';\r\n\r\nconst ErrorMessage = (props) => {\r\n  const { header, body } = props;\r\n  return (\r\n    <Grid.Row>\r\n      <Message icon color=\"yellow\">\r\n        <Icon name=\"exclamation circle\" />\r\n        <Message.Content>\r\n          <Message.Header>{header}</Message.Header>\r\n          <p>{body}</p>\r\n        </Message.Content>\r\n      </Message>\r\n      <Divider hidden />\r\n    </Grid.Row>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import React from 'react';\r\n\r\nimport { Grid, Message, Divider, Icon, List } from 'semantic-ui-react';\r\n\r\nconst SuccessMessage = (props) => {\r\n  const { user, patient } = props;\r\n  return (\r\n    <Grid.Row>\r\n      <Message icon color=\"green\">\r\n        <Icon name=\"check circle\" />\r\n        <Message.Content>\r\n          <Message.Header>Launch successful!</Message.Header>\r\n          <List>\r\n            <List.Item>Patient: {patient.id}</List.Item>\r\n            <List.Item>User: {user}</List.Item>\r\n          </List>\r\n        </Message.Content>\r\n      </Message>\r\n      <Divider hidden />\r\n    </Grid.Row>\r\n  );\r\n};\r\n\r\nexport default SuccessMessage;\r\n","import React from 'react';\r\n\r\nimport { List } from 'semantic-ui-react';\r\n\r\nconst Information = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <p>\r\n        This project was built to reduce the ramp-up time for getting new projects off the ground.\r\n        It is fairly opinionated in that it comes out of the box with...\r\n      </p>\r\n      <List as=\"ul\" bulleted>\r\n        <List.Item as=\"li\">\r\n          <a href=\"https://reactjs.org/\">React</a>\r\n        </List.Item>\r\n        <List.Item as=\"li\">\r\n          <a href=\"https://redux.js.org/\">Redux</a>\r\n        </List.Item>\r\n        <List.Item as=\"li\">\r\n          <a href=\"https://redux-saga.js.org/\">Redux-Saga</a>\r\n        </List.Item>\r\n        <List.Item as=\"li\">\r\n          <a href=\"https://semantic-ui.com/\">Semantic-UI</a>\r\n        </List.Item>\r\n      </List>\r\n      <p>This project was inspired by...</p>\r\n      <List bulleted>\r\n        <List.Item>\r\n          <a href=\"https://redux-saga.js.org/\">react-boilerplate</a>\r\n        </List.Item>\r\n        <List.Item>\r\n          <a href=\"https://redux-saga.js.org/\">react-redux-saga-boilerplate</a>\r\n        </List.Item>\r\n        <List.Item>\r\n          <a href=\"https://github.com/facebook/create-react-app\">create-react-app</a>\r\n        </List.Item>\r\n      </List>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Information;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Router, Switch, Route } from 'react-router-dom';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport { Grid, Container, Header, Divider } from 'semantic-ui-react';\r\n\r\nimport { loadSmartInfoAction } from './actions';\r\nimport { getSmartError, getPatient, getSmartInfo } from './selectors';\r\nimport history from '../../modules/history';\r\nimport Home from '../Home';\r\nimport ErrorMessage from '../../components/ErrorMessage';\r\nimport SuccessMessage from '../../components/SuccessMessage';\r\nimport Information from '../../components/Information';\r\n\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    const { initializeSmartClient } = this.props;\r\n    initializeSmartClient();\r\n  }\r\n\r\n  render() {\r\n    const { error, smart, patient } = this.props;\r\n    return (\r\n      <Router history={history}>\r\n        <Helmet />\r\n        <Container style={{ marginTop: '2rem' }}>\r\n          <Grid columns=\"1\" stackable>\r\n            <Grid.Column>\r\n              {error ? <ErrorMessage {...error} /> : null}\r\n              {patient ? <SuccessMessage patient={patient} user={smart.user} /> : null}\r\n              <Grid.Row>\r\n                <Header as=\"h1\">FHIR App Starter</Header>\r\n                <Divider />\r\n              </Grid.Row>\r\n\r\n              <Grid.Row>\r\n                <Information />\r\n              </Grid.Row>\r\n\r\n              <Grid.Row>\r\n                <Divider />\r\n              </Grid.Row>\r\n\r\n              {smart ? (\r\n                <Switch>\r\n                  <Route path=\"/\" exact component={Home} />\r\n                </Switch>\r\n              ) : null}\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Container>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return { error: getSmartError(state), smart: getSmartInfo(state), patient: getPatient(state) };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    initializeSmartClient: () => dispatch(loadSmartInfoAction()),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { HelmetProvider } from 'react-helmet-async';\r\n\r\nimport configureStore from './store/index';\r\n\r\nimport App from './containers/App';\r\n\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport './styles.css';\r\n\r\nconst store = configureStore({});\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <HelmetProvider>\r\n      <App />\r\n    </HelmetProvider>\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n","/**\r\n * Create the store with dynamic reducers\r\n */\r\n\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { routerMiddleware } from 'connected-react-router';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport logger from 'redux-logger';\r\n\r\nimport sagas from './sagas';\r\nimport rootReducer from './reducers';\r\n\r\nexport default function configureStore(initialState = {}, history) {\r\n  let composeEnhancers = compose;\r\n  const reduxSagaMonitorOptions = {};\r\n\r\n  // If Redux Dev Tools and Saga Dev Tools Extensions are installed, enable them\r\n  /* istanbul ignore next */\r\n  if (process.env.NODE_ENV !== 'production' && typeof window === 'object') {\r\n    /* eslint-disable no-underscore-dangle */\r\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__)\r\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\r\n\r\n    // NOTE: Uncomment the code below to restore support for Redux Saga\r\n    // Dev Tools once it supports redux-saga version 1.x.x\r\n    // if (window.__SAGA_MONITOR_EXTENSION__)\r\n    //   reduxSagaMonitorOptions = {\r\n    //     sagaMonitor: window.__SAGA_MONITOR_EXTENSION__,\r\n    //   };\r\n    /* eslint-enable */\r\n  }\r\n\r\n  const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\r\n\r\n  // Create the store with two middlewares\r\n  // 1. sagaMiddleware: Makes redux-sagas work\r\n  // 2. routerMiddleware: Syncs the location/URL path to the state\r\n  const middlewares = [sagaMiddleware, routerMiddleware(history), logger];\r\n\r\n  const enhancers = [applyMiddleware(...middlewares)];\r\n\r\n  const store = createStore(rootReducer, initialState, composeEnhancers(...enhancers));\r\n\r\n  // Extensions\r\n  store.runSaga = sagaMiddleware.run;\r\n\r\n  store.runSaga(sagas);\r\n\r\n  return store;\r\n}\r\n"],"sourceRoot":""}